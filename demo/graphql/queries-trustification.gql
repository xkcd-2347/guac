fragment allPkgTree on Package {
  id
  type
  namespaces {
    id
    namespace
    names {
      id
      name
      versions {
        id
        version
        qualifiers {
          key
          value
        }
        subpath
      }
    }
  }
}

query PkgQ1 {
  packages(pkgSpec: {}) {
    type
  }
}

query PkgQ2 {
  packages(pkgSpec: { type: "deb" }) {
    type
    namespaces {
      namespace
    }
  }
}

query PkgQ3 {
  packages(pkgSpec: { name: "libp11-kit0" }) {
    ...allPkgTree
  }
}

query PkgQ4 {
  packages(pkgSpec: { type: "guac", namespace: "cdx/docker.io/library", name: "consul" }) {
    ...allPkgTree
  }
}

fragment allIsDependencyTree on IsDependency {
  id
  justification
  versionRange
  package {
    ...allPkgTree
  }
  dependencyPackage {
    ...allPkgTree
  }
  origin
  collector
}

query IsDependencyQ1 {
  IsDependency(isDependencySpec: { package: { type: "guac", namespace: "cdx/docker.io/library", name: "consul" }}) {
    dependencyPackage {
      type
      namespaces {
        namespace
        names {
          name
        }
      }
    }
  }
}

query IsDependencyQ2 {
  IsDependency(isDependencySpec: {
    package: { type: "guac", namespace: "cdx/docker.io/library", name: "consul" }
    dependencyPackage: { type: "golang", namespace: "github.com/sirupsen", name: "logrus" }
  }) {
    ...allIsDependencyTree
  }
}

query PkgQ5 {
  packages(pkgSpec: { type: "golang", namespace: "github.com/hashicorp/consul", name: "sdk" }) {
    type
    namespaces {
      namespace
      names {
        id
        name
      }
    }
  }
}

query PkgQ6 {
  packages(pkgSpec: { type: "golang", namespace: "github.com/hashicorp/consul", name: "api" }) {
    type
    namespaces {
      namespace
      names {
        id
        name
      }
    }
  }
}

query PathQ1 ($subject: ID!, $target: ID!) {
  path(subject: $subject, target: $target, maxPathLength: 10, usingOnly: []) {
    __typename
    ... on Package{
        ...allPkgTree
    }
    ... on IsDependency {
        ...allIsDependencyTree
    }
  }
}

query GetNeighbors ($nodeId: ID!) {
  neighbors(node: $nodeId, usingOnly: []) {
    __typename
    ... on Package{
      ...allPkgTree
    }
    ... on IsDependency {
      ...allIsDependencyTree
    }
  }
}

query Node ($nodeId: ID!) {
  node(node: $nodeId) {
    __typename
    ... on Package{
      ...allPkgTree
    }
    ... on IsDependency {
      ...allIsDependencyTree
    }
  }
}

fragment allCertifyVulnTree on CertifyVuln {
  id
  package {
    id
    type
    namespaces {
      id
      namespace
      names {
        id
        name
        versions {
          id
          version
          qualifiers {
            key
            value
          }
          subpath
        }
      }
    }
  }
  vulnerability {
    id
    type
    vulnerabilityIDs {
      id
      vulnerabilityID
    }
  }
  metadata {
    dbUri
    dbVersion
    scannerUri
    scannerVersion
    timeScanned
    origin
    collector
  }
}

fragment allCertifyVEXStatementTree on CertifyVEXStatement {
  id
  subject {
    __typename
    ... on Package {
      id
      type
      namespaces {
        id
        namespace
        names {
          id
          name
          versions {
            id
            version
            qualifiers {
              key
              value
            }
            subpath
          }
        }
      }
    }
    ... on Artifact {
      id
      algorithm
      digest
    }
  }
  vulnerability {
    id
    type
    vulnerabilityIDs {
      id
      vulnerabilityID
    }
  }
  status
  vexJustification
  statement
  statusNotes
  knownSince
  origin
  collector
}

fragment allHasSBOMTree on HasSBOM {
  id
  subject {
    __typename
    ... on Package {
      id
      type
      namespaces {
        id
        namespace
        names {
          id
          name
          versions {
            id
            version
            qualifiers {
              key
              value
            }
            subpath
          }
        }
      }
    }
    ... on Artifact {
      id
      algorithm
      digest
    }
  }
  uri
  algorithm
  digest
  downloadLocation
  origin
  collector
}

query FindVulnerabilitySbomURI_quarkus {
  findVulnerabilityBySbomURI (
    sbomURI:"https://access.redhat.com/security/data/sbom/beta/spdx/quarkus-bom-d6ecbbd9-31bf-46fd-afda-8082120f5260", offset:0, limit:1000) {
    ... on CertifyVuln {
      ...allCertifyVulnTree
    }
    ... on CertifyVEXStatement {
      ...allCertifyVEXStatementTree
    }
  }
}

query FindVulnerabilityCPE_quarkus {
  findVulnerabilityByCPE (cpe: "cpe:/a:redhat:quarkus:2.13::el8") {
    ... on CertifyVuln {
      ...allCertifyVulnTree
    }
    ... on CertifyVEXStatement {
      ...allCertifyVEXStatementTree
    }
  }
}

query FindVulnerability_quarkus {
  findVulnerability (purl: "pkg:maven/com.redhat.quarkus.platform/quarkus-bom@2.13.8.Final-redhat-00004?type=pom") {
    ... on CertifyVuln {
      ...allCertifyVulnTree
    }
    ... on CertifyVEXStatement {
      ...allCertifyVEXStatementTree
    }
  }
}

query FindVulnerabilitySbomURI_ubi9 {
  findVulnerabilityBySbomURI (
    sbomURI:"https://access.redhat.com/security/data/sbom/beta/spdx/ubi9-minimal-container-9b954617-943f-43ab-bd5b-3df62a706ed6", offset:0, limit:1000) {
    ... on CertifyVuln {
      ...allCertifyVulnTree
    }
    ... on CertifyVEXStatement {
      ...allCertifyVEXStatementTree
    }
  }
}

query FindVulnerabilitySbomURI_ubi8 {
  findVulnerabilityBySbomURI (
    sbomURI:"https://access.redhat.com/security/data/sbom/beta/spdx/ubi8-minimal-container-5b43ae22-cbf0-4626-8ec5-4ae0765a3d4b", offset:0, limit:1000) {
    ... on CertifyVuln {
      ...allCertifyVulnTree
    }
    ... on CertifyVEXStatement {
      ...allCertifyVEXStatementTree
    }
  }
}

query FindRelatedProducts {
  findTopLevelPackagesRelatedToVulnerability(vulnerabilityID: "cve-2023-44487") {
    __typename
    ... on CertifyVEXStatement {
      ...allCertifyVEXStatementTree
    }
    ... on Package {
      ...allPkgTree
    }
    ... on IsDependency {
      dependencyType
    }
  }
}

query FindDependentProduct {
  findDependentProduct(
    purl: "pkg:rpm/redhat/libuuid@2.32.1-42.el8_8?arch=x86_64", offset: 0, limit: 10
  ) {
    ...allHasSBOMTree
  }
}

query HasSBOM {
  HasSBOM (hasSBOMSpec: {}) {
    uri
  }
}

query Vulnerabilities {
  vulnerabilities(vulnSpec: {}) {
    type
    vulnerabilityIDs {
      vulnerabilityID
    }
  }
}

query TC_1593_FindDependentProduct {
  findDependentProduct (
    purl: "pkg:maven/log4j/log4j@1.2.17?type=jar"
  ) {
    ...allHasSBOMTree
  }
}

query TC_1609_FindDependentProduct {
  findDependentProduct (
    purl: "pkg:maven/io.github.crac/org-crac@0.1.1.redhat-00002?type=jar"
  ) {
    ...allHasSBOMTree
  }
}

query CVE_2023_1664 {
  CertifyVEXStatement (
    certifyVEXStatementSpec: {
      vulnerability: {
        vulnerabilityID: "cve-2023-1664"
      }
      subject: {
        package: {
          name: "keycloak-core"
        }
      }
    }
  ) {
    documentRef
  }
}

query VulnerabilityIDNotFound {
  findTopLevelPackagesRelatedToVulnerability (vulnerabilityID:"CVE") {
    __typename
  }
}

query TC_1609_HasSBOM {
  HasSBOM (hasSBOMSpec: {uri: "https://access.redhat.com/security/data/sbom/spdx/sample-rpmmod"}) {
    ...allHasSBOMTree
  }
}

query TC_1802_HasSBOM {
  HasSBOM (hasSBOMSpec:{uri: "https://access.redhat.com/security/data/sbom/spdx/RHEL-9.4.0.Z.MAIN+EUS"}) {
    uri
    algorithm
    id
    digest
  }
}

query TC_1757_Package_x86_64 {
  packages (pkgSpec:{
    name:"openssl",
    qualifiers: [
      {key:"arch", value:"src"},
      {key:"repository_id", value:"rhel-9-for-x86_64-baseos-eus-source-rpms"}
    ]
  }) {
    ...allPkgTree
  }
}

query TC_1757_Package_aarch64 {
  packages (pkgSpec:{
    name:"openssl",
    qualifiers: [
      {key:"arch", value:"src"},
      {key:"repository_id", value:"rhel-9-for-aarch64-baseos-eus-source-rpms"}
    ]
  }) {
    ...allPkgTree
  }
}

query TC_1814_HasSBOM {
  HasSBOM (hasSBOMSpec: {uri: "http://spdx.org/spdxdocs/spdx-example-json-2.2-444504E0-4F89-41D3-9A0C-0305E82C3301"}) {
    ...allHasSBOMTree
  }
}

query TC_1814_FindVulnerabilityBySbomURI {
  findVulnerabilityBySbomURI (sbomURI:"http://spdx.org/spdxdocs/spdx-example-json-2.2-444504E0-4F89-41D3-9A0C-0305E82C3301") {
    ... on CertifyVuln {
      ...allCertifyVulnTree
    }
    ... on CertifyVEXStatement {
      ...allCertifyVEXStatementTree
    }
  }
}

query TC_1847_FindDependentProduct_source {
  findDependentProduct (
    purl: "pkg:generic/openssl@3.0.7?checksum=sha256:83049d042a260e696f62406ac5c08bf706fd84383f945cf21bd61e9ed95c396e&download_url=https://openssl.org/source/openssl-3.0.7.tar.gz"
  ) {
    ...allHasSBOMTree
  }
}

query TC_1847_FindDependentProduct_rpm {
  findDependentProduct (
    purl: "pkg:rpm/redhat/openssl-perl@3.0.7-18.el9_2?arch=aarch64&repository_id=rhel-9-for-aarch64-baseos-eus-rpms"
  ) {
    ...allHasSBOMTree
  }
}

query TC_1842_HasMetadata {
  HasMetadata (hasMetadataSpec:{key: "cpe", value:"cpe:2.3:a:alpine-baselayout-data:alpine-baselayout-data:3.2.0-r22:*:*:*:*:*:*:*"}) {
    subject {
      ... on Package {
        ...allPkgTree
      }
    }
  }
}
